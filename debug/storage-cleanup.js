/**
 * Script de depuraci√≥n para detectar y limpiar claves undefined en chrome.storage
 * Este script ayuda a identificar y eliminar claves problem√°ticas que pueden estar
 * causando errores en la extensi√≥n.
 */

console.log('üîç Storage Cleanup Debug Script - Starting...');

// Funci√≥n para obtener todas las claves del storage
function getAllStorageKeys() {
  return new Promise((resolve) => {
    chrome.storage.local.get(null, (result) => {
      if (chrome.runtime.lastError) {
        console.error('Error getting all storage keys:', chrome.runtime.lastError);
        resolve({});
        return;
      }
      resolve(result);
    });
  });
}

// Funci√≥n para detectar claves problem√°ticas
function detectProblematicKeys(storageData) {
  const problematicKeys = [];
  const suspiciousKeys = [];

  for (const [key, value] of Object.entries(storageData)) {
    // Detectar claves undefined o problem√°ticas
    if (key === 'undefined' || key === 'null' || key === '') {
      problematicKeys.push({ key, value, reason: 'Invalid key name' });
    }

    // Detectar claves que parecen sospechosas
    if (key.includes('undefined') || key.length === 0) {
      suspiciousKeys.push({ key, value, reason: 'Suspicious key pattern' });
    }

    // Detectar valores undefined guardados como strings
    if (value === 'undefined' || value === undefined) {
      suspiciousKeys.push({ key, value, reason: 'Undefined value' });
    }
  }

  return { problematicKeys, suspiciousKeys };
}

// Funci√≥n para limpiar claves problem√°ticas
function cleanProblematicKeys(problematicKeys) {
  if (problematicKeys.length === 0) {
    console.log('‚úÖ No se encontraron claves problem√°ticas para limpiar');
    return Promise.resolve([]);
  }

  const keysToRemove = problematicKeys.map(item => item.key);

  return new Promise((resolve) => {
    chrome.storage.local.remove(keysToRemove, () => {
      if (chrome.runtime.lastError) {
        console.error('Error removing problematic keys:', chrome.runtime.lastError);
        resolve([]);
        return;
      }

      console.log('üßπ Claves problem√°ticas eliminadas:', keysToRemove);
      resolve(keysToRemove);
    });
  });
}

// Funci√≥n para generar reporte del storage
function generateStorageReport(storageData, analysis) {
  console.log('\nüìä === REPORTE DE CHROME.STORAGE ===');
  console.log(`Total de claves: ${Object.keys(storageData).length}`);
  console.log(`Claves problem√°ticas: ${analysis.problematicKeys.length}`);
  console.log(`Claves sospechosas: ${analysis.suspiciousKeys.length}`);

  if (analysis.problematicKeys.length > 0) {
    console.log('\n‚ùå CLAVES PROBLEM√ÅTICAS:');
    analysis.problematicKeys.forEach(item => {
      console.log(`  - "${item.key}" (${item.reason}):`, item.value);
    });
  }

  if (analysis.suspiciousKeys.length > 0) {
    console.log('\n‚ö†Ô∏è CLAVES SOSPECHOSAS:');
    analysis.suspiciousKeys.forEach(item => {
      console.log(`  - "${item.key}" (${item.reason}):`, item.value);
    });
  }

  console.log('\nüìã TODAS LAS CLAVES DEL STORAGE:');
  Object.keys(storageData).sort().forEach(key => {
    const value = storageData[key];
    const valueType = typeof value;
    const valuePreview = valueType === 'string' && value.length > 50
      ? value.substring(0, 50) + '...'
      : value;
    console.log(`  - "${key}" (${valueType}):`, valuePreview);
  });
}

// Funci√≥n principal de an√°lisis y limpieza
async function analyzeAndCleanStorage() {
  try {
    console.log('üîç Obteniendo datos del chrome.storage...');
    const storageData = await getAllStorageKeys();

    console.log('üîé Analizando claves problem√°ticas...');
    const analysis = detectProblematicKeys(storageData);

    generateStorageReport(storageData, analysis);

    // Limpiar claves problem√°ticas si existen
    if (analysis.problematicKeys.length > 0) {
      console.log('\nüßπ Limpiando claves problem√°ticas...');
      const removedKeys = await cleanProblematicKeys(analysis.problematicKeys);

      if (removedKeys.length > 0) {
        console.log('‚úÖ Limpieza completada. Generando reporte post-limpieza...');

        // Generar reporte despu√©s de la limpieza
        const cleanStorageData = await getAllStorageKeys();
        const cleanAnalysis = detectProblematicKeys(cleanStorageData);

        console.log('\nüìä === REPORTE POST-LIMPIEZA ===');
        console.log(`Total de claves: ${Object.keys(cleanStorageData).length}`);
        console.log(`Claves problem√°ticas restantes: ${cleanAnalysis.problematicKeys.length}`);
        console.log(`Claves sospechosas restantes: ${cleanAnalysis.suspiciousKeys.length}`);
      }
    }

    // Verificar configuraci√≥n espec√≠fica de "Solo grupos p√∫blicos"
    console.log('\nüîç Verificando configuraci√≥n "Solo grupos p√∫blicos"...');
    checkOnlyPublicGroupsConfig(storageData);

  } catch (error) {
    console.error('‚ùå Error durante el an√°lisis:', error);
  }
}

// Funci√≥n para verificar espec√≠ficamente la configuraci√≥n de "Solo grupos p√∫blicos"
function checkOnlyPublicGroupsConfig(storageData) {
  const relevantKeys = [
    'onlyPublicGroups',
    'publicGroups',
    'groupPublic',
    'lmp_group_search_options',
    'snap_lead_manager_group_options'
  ];

  console.log('üîç Buscando configuraciones relacionadas con grupos p√∫blicos:');

  relevantKeys.forEach(key => {
    if (storageData.hasOwnProperty(key)) {
      console.log(`  ‚úÖ "${key}":`, storageData[key]);
    } else {
      console.log(`  ‚ùå "${key}": No encontrado`);
    }
  });

  // Verificar si hay alguna clave que contenga "undefined" y est√© relacionada con grupos
  Object.keys(storageData).forEach(key => {
    if (key.includes('undefined') || key.includes('null')) {
      console.log(`  ‚ö†Ô∏è Clave sospechosa encontrada: "${key}":`, storageData[key]);
    }
  });
}

// Funci√≥n para probar la funcionalidad de guardado
function testSaveOnlyPublicGroups() {
  console.log('\nüß™ === PRUEBA DE GUARDADO "SOLO GRUPOS P√öBLICOS" ===');

  // Simular el guardado como lo har√≠a sidebar.js
  const testValue = true;
  const testData = {
    onlyPublicGroups: testValue,
    testTimestamp: new Date().toISOString()
  };

  chrome.storage.local.set(testData, () => {
    if (chrome.runtime.lastError) {
      console.error('‚ùå Error al guardar datos de prueba:', chrome.runtime.lastError);
      return;
    }

    console.log('‚úÖ Datos de prueba guardados correctamente:', testData);

    // Verificar que se guard√≥ correctamente
    chrome.storage.local.get(['onlyPublicGroups', 'testTimestamp'], (result) => {
      if (chrome.runtime.lastError) {
        console.error('‚ùå Error al recuperar datos de prueba:', chrome.runtime.lastError);
        return;
      }

      console.log('üì• Datos recuperados:', result);

      if (result.onlyPublicGroups === testValue) {
        console.log('‚úÖ Test PASSED: onlyPublicGroups se guard√≥ y recuper√≥ correctamente');
      } else {
        console.log('‚ùå Test FAILED: onlyPublicGroups no se recuper√≥ correctamente');
      }

      // Limpiar datos de prueba
      chrome.storage.local.remove(['testTimestamp'], () => {
        console.log('üßπ Datos de prueba limpiados');
      });
    });
  });
}

// Exportar funciones para uso manual
window.storageDebug = {
  analyzeAndCleanStorage,
  testSaveOnlyPublicGroups,
  getAllStorageKeys,
  detectProblematicKeys,
  cleanProblematicKeys
};

// Ejecutar an√°lisis autom√°ticamente
analyzeAndCleanStorage();

// Ejecutar prueba de guardado despu√©s de un momento
setTimeout(testSaveOnlyPublicGroups, 2000);

console.log('‚úÖ Storage Cleanup Debug Script loaded. Use window.storageDebug for manual operations.');
