// Script de verificaci√≥n final para la consolidaci√≥n de almacenamiento
// Ejecutar en la consola del navegador cuando la extensi√≥n est√© cargada

console.log('üöÄ VERIFICACI√ìN FINAL: Sistema de Almacenamiento Consolidado');
console.log('==============================================================');

async function verifyStorageConsolidation() {
  console.log('\n1Ô∏è‚É£ VERIFICANDO ESTRUCTURA DE ARCHIVOS...');

  // Verificar que los m√≥dulos existen
  const modulesToCheck = [
    'StorageConsolidator',
    'GroupSearchFilters',
    'GroupSearchOptions'
  ];

  modulesToCheck.forEach(module => {
    if (typeof window[module] !== 'undefined' || typeof eval(module) !== 'undefined') {
      console.log(`‚úÖ ${module} est√° disponible`);
    } else {
      console.log(`‚ùå ${module} NO est√° disponible`);
    }
  });

  console.log('\n2Ô∏è‚É£ VERIFICANDO CONFIGURACI√ìN ACTUAL...');

  // Verificar datos en chrome.storage
  return new Promise((resolve) => {
    chrome.storage.local.get([
      'lmp_group_search_options',
      'leadManagerGroupFilters',
      'snap_lead_manager_group_options',
      'groupPublic',
      'groupPrivate',
      'minUsers'
    ], (result) => {
      console.log('üì¶ Datos en chrome.storage.local:', result);

      // Verificar localStorage
      const localData = {
        'lmp_group_search_options': localStorage.getItem('lmp_group_search_options'),
        'snap_lead_manager_group_options': localStorage.getItem('snap_lead_manager_group_options')
      };
      console.log('üíæ Datos en localStorage:', localData);

      // Verificar si hay datos en el sistema unificado
      if (result.lmp_group_search_options) {
        console.log('‚úÖ Sistema unificado tiene datos:', result.lmp_group_search_options);
      } else {
        console.log('‚ö†Ô∏è Sistema unificado NO tiene datos');
      }

      // Verificar si quedan datos antiguos
      const oldDataKeys = ['leadManagerGroupFilters', 'snap_lead_manager_group_options', 'groupPublic', 'groupPrivate', 'minUsers'];
      const remainingOldData = oldDataKeys.filter(key => result[key] !== undefined);

      if (remainingOldData.length > 0) {
        console.log('‚ö†Ô∏è Datos antiguos restantes:', remainingOldData);
      } else {
        console.log('‚úÖ Todos los datos antiguos han sido limpiados');
      }

      resolve(result);
    });
  });
}

async function testCheckboxFunctionality() {
  console.log('\n3Ô∏è‚É£ PROBANDO FUNCIONALIDAD DEL CHECKBOX "Solo p√∫blicos"...');

  return new Promise((resolve) => {
    // Obtener configuraci√≥n actual
    chrome.storage.local.get(['lmp_group_search_options'], (result) => {
      let options = result.lmp_group_search_options;

      if (!options) {
        console.log('‚ö†Ô∏è No hay opciones guardadas, creando configuraci√≥n inicial...');
        options = {
          publicGroups: true,
          privateGroups: false,
          minUsers: 100,
          minPostsYear: 1
        };
      }

      console.log('üìã Configuraci√≥n actual:', options);

      // Simular cambio del checkbox
      const newValue = !options.publicGroups;
      const updatedOptions = { ...options, publicGroups: newValue };

      console.log(`üîÑ Cambiando "Solo p√∫blicos" de ${options.publicGroups} a ${newValue}`);

      // Guardar nueva configuraci√≥n
      chrome.storage.local.set({ 'lmp_group_search_options': updatedOptions }, () => {
        console.log('üíæ Nueva configuraci√≥n guardada en chrome.storage');

        // Tambi√©n guardar en localStorage para consistencia
        localStorage.setItem('lmp_group_search_options', JSON.stringify(updatedOptions));
        console.log('üíæ Nueva configuraci√≥n sincronizada en localStorage');

        // Verificar que se guard√≥ correctamente
        chrome.storage.local.get(['lmp_group_search_options'], (newResult) => {
          if (newResult.lmp_group_search_options?.publicGroups === newValue) {
            console.log('‚úÖ Checkbox funciona correctamente!');
          } else {
            console.log('‚ùå Error: el checkbox NO se guard√≥ correctamente');
          }
          resolve(newResult);
        });
      });
    });
  });
}

async function testStorageSync() {
  console.log('\n4Ô∏è‚É£ PROBANDO SINCRONIZACI√ìN ENTRE SISTEMAS...');

  // Datos de prueba
  const testData = {
    publicGroups: true,
    privateGroups: false,
    minUsers: 250,
    minPostsYear: 5,
    testTimestamp: Date.now()
  };

  console.log('üìù Guardando datos de prueba:', testData);

  return new Promise((resolve) => {
    // Guardar en chrome.storage
    chrome.storage.local.set({ 'lmp_group_search_options': testData }, () => {
      console.log('‚úÖ Datos guardados en chrome.storage');

      // Guardar en localStorage
      localStorage.setItem('lmp_group_search_options', JSON.stringify(testData));
      console.log('‚úÖ Datos guardados en localStorage');

      // Verificar sincronizaci√≥n
      setTimeout(() => {
        chrome.storage.local.get(['lmp_group_search_options'], (chromeResult) => {
          const localResult = JSON.parse(localStorage.getItem('lmp_group_search_options') || '{}');

          const chromeData = chromeResult.lmp_group_search_options;

          if (JSON.stringify(chromeData) === JSON.stringify(localResult)) {
            console.log('‚úÖ Datos sincronizados correctamente entre sistemas');
          } else {
            console.log('‚ùå Error: datos NO sincronizados');
            console.log('Chrome:', chromeData);
            console.log('Local:', localResult);
          }

          resolve({ chrome: chromeData, local: localResult });
        });
      }, 100);
    });
  });
}

// Funci√≥n principal de verificaci√≥n
async function runFullVerification() {
  try {
    console.log('üîç Iniciando verificaci√≥n completa...\n');

    await verifyStorageConsolidation();
    await testCheckboxFunctionality();
    await testStorageSync();

    console.log('\nüéâ VERIFICACI√ìN COMPLETADA');
    console.log('==========================');
    console.log('Si todas las pruebas pasaron con ‚úÖ, el sistema est√° funcionando correctamente.');
    console.log('Si hay ‚ùå o ‚ö†Ô∏è, revisa los mensajes para identificar problemas.');

  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error);
  }
}

// Auto-ejecutar
runFullVerification();

// Exportar funciones para uso manual
window.storageVerification = {
  verifyStorageConsolidation,
  testCheckboxFunctionality,
  testStorageSync,
  runFullVerification
};
