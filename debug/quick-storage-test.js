// Script de prueba r√°pida para verificar el sistema de almacenamiento consolidado
// Copia y pega este c√≥digo en la consola del navegador (F12) en Facebook con la extensi√≥n cargada

console.log('%cüöÄ PRUEBA R√ÅPIDA: Sistema de Almacenamiento Consolidado', 'color: #4CAF50; font-size: 16px; font-weight: bold;');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

// Funci√≥n para ejecutar prueba r√°pida
async function quickStorageTest() {
  try {
    console.log('\nüìã 1. VERIFICANDO ESTADO ACTUAL...');

    // Obtener estado actual
    const currentState = await new Promise(resolve => {
      chrome.storage.local.get([
        'lmp_group_search_options',
        'leadManagerGroupFilters',
        'snap_lead_manager_group_options',
        'groupPublic',
        'groupPrivate'
      ], resolve);
    });

    console.log('üì¶ Datos actuales en chrome.storage:', currentState);

    const localStorageData = localStorage.getItem('lmp_group_search_options');
    console.log('üíæ Datos en localStorage:', localStorageData ? JSON.parse(localStorageData) : 'No hay datos');

    console.log('\nüîß 2. PROBANDO FUNCIONALIDAD DEL CHECKBOX...');

    // Obtener o crear configuraci√≥n inicial
    let options = currentState.lmp_group_search_options;
    if (!options) {
      options = {
        publicGroups: true,
        privateGroups: false,
        minUsers: 100,
        minPostsYear: 1
      };
      console.log('‚öôÔ∏è Creando configuraci√≥n inicial:', options);
    }

    console.log('üìã Configuraci√≥n actual:', options);

    // Simular cambio del checkbox "Solo p√∫blicos"
    const originalValue = options.publicGroups;
    const newValue = !originalValue;

    console.log(`üîÑ Cambiando "Solo p√∫blicos": ${originalValue} ‚Üí ${newValue}`);

    const updatedOptions = { ...options, publicGroups: newValue };

    // Guardar en ambos sistemas
    await new Promise(resolve => {
      chrome.storage.local.set({ 'lmp_group_search_options': updatedOptions }, () => {
        localStorage.setItem('lmp_group_search_options', JSON.stringify(updatedOptions));
        resolve();
      });
    });

    console.log('üíæ Configuraci√≥n guardada');

    // Verificar que se guard√≥ correctamente
    const verification = await new Promise(resolve => {
      chrome.storage.local.get(['lmp_group_search_options'], resolve);
    });

    const localVerification = JSON.parse(localStorage.getItem('lmp_group_search_options') || '{}');

    console.log('\n‚úÖ 3. VERIFICACI√ìN DE GUARDADO...');
    console.log('üì¶ Chrome Storage:', verification.lmp_group_search_options);
    console.log('üíæ Local Storage:', localVerification);

    // Verificar consistencia
    const chromeValue = verification.lmp_group_search_options?.publicGroups;
    const localValue = localVerification.publicGroups;

    if (chromeValue === newValue && localValue === newValue) {
      console.log('%c‚úÖ ¬°√âXITO! El checkbox se guard√≥ correctamente en ambos sistemas', 'color: #4CAF50; font-weight: bold;');
      console.log(`   Valor esperado: ${newValue}`);
      console.log(`   Chrome Storage: ${chromeValue}`);
      console.log(`   Local Storage: ${localValue}`);
    } else {
      console.log('%c‚ùå ERROR: El checkbox NO se guard√≥ correctamente', 'color: #F44336; font-weight: bold;');
      console.log(`   Valor esperado: ${newValue}`);
      console.log(`   Chrome Storage: ${chromeValue}`);
      console.log(`   Local Storage: ${localValue}`);
    }

    console.log('\nüßπ 4. VERIFICANDO LIMPIEZA DE DATOS ANTIGUOS...');

    const oldKeys = ['leadManagerGroupFilters', 'snap_lead_manager_group_options', 'groupPublic', 'groupPrivate'];
    const remainingOldData = oldKeys.filter(key => currentState[key] !== undefined);

    if (remainingOldData.length === 0) {
      console.log('%c‚úÖ Excelente: No hay datos antiguos restantes', 'color: #4CAF50; font-weight: bold;');
    } else {
      console.log('%c‚ö†Ô∏è Advertencia: Todav√≠a hay datos antiguos:', 'color: #FF9800; font-weight: bold;', remainingOldData);
      console.log('   Esto podr√≠a indicar que la migraci√≥n no se ejecut√≥ completamente');
    }

    // Verificar localStorage antiguo
    const oldLocalData = localStorage.getItem('snap_lead_manager_group_options');
    if (!oldLocalData) {
      console.log('‚úÖ localStorage antiguo limpiado correctamente');
    } else {
      console.log('‚ö†Ô∏è Datos antiguos en localStorage:', oldLocalData);
    }

    console.log('\nüéØ 5. RESUMEN FINAL...');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

    const summary = {
      '‚úÖ Sistema unificado funcionando': !!verification.lmp_group_search_options,
      '‚úÖ Checkbox guarda correctamente': chromeValue === newValue && localValue === newValue,
      '‚úÖ Sincronizaci√≥n Chrome ‚Üî Local': JSON.stringify(verification.lmp_group_search_options) === JSON.stringify(localVerification),
      '‚úÖ Datos antiguos limpiados': remainingOldData.length === 0 && !oldLocalData,
      'üìä Configuraci√≥n actual': verification.lmp_group_search_options
    };

    Object.entries(summary).forEach(([key, value]) => {
      if (key.startsWith('‚úÖ')) {
        console.log(`${value ? '‚úÖ' : '‚ùå'} ${key.substring(2)}`);
      } else {
        console.log(`${key}:`, value);
      }
    });

    if (Object.values(summary).slice(0, 4).every(v => v === true)) {
      console.log('\n%cüéâ ¬°SISTEMA FUNCIONANDO PERFECTAMENTE!', 'color: #4CAF50; font-size: 18px; font-weight: bold;');
      console.log('   El checkbox "Solo p√∫blicos" y todo el sistema de almacenamiento est√°n funcionando correctamente.');
    } else {
      console.log('\n%c‚ö†Ô∏è HAY PROBLEMAS QUE REVISAR', 'color: #FF9800; font-size: 18px; font-weight: bold;');
      console.log('   Revisa los mensajes anteriores para identificar qu√© necesita correcci√≥n.');
    }

  } catch (error) {
    console.error('%c‚ùå ERROR durante la prueba:', 'color: #F44336; font-weight: bold;', error);
  }
}

// Funci√≥n para ejecutar migraci√≥n manual si es necesaria
async function runManualMigration() {
  console.log('\nüîß EJECUTANDO MIGRACI√ìN MANUAL...');

  try {
    if (typeof StorageConsolidator !== 'undefined') {
      const consolidator = new StorageConsolidator();
      const result = await consolidator.migrateAndConsolidate();
      console.log('‚úÖ Migraci√≥n completada:', result);
    } else {
      console.log('‚ö†Ô∏è StorageConsolidator no est√° disponible. Aseg√∫rate de que la extensi√≥n est√© cargada correctamente.');
    }
  } catch (error) {
    console.error('‚ùå Error durante la migraci√≥n:', error);
  }
}

// Ejecutar autom√°ticamente
console.log('üèÉ‚Äç‚ôÇÔ∏è Ejecutando prueba autom√°ticamente...');
quickStorageTest();

// Exportar funciones para uso manual
window.quickStorageTest = quickStorageTest;
window.runManualMigration = runManualMigration;

console.log('\nüí° COMANDOS DISPONIBLES:');
console.log('‚Ä¢ quickStorageTest() - Ejecutar prueba completa');
console.log('‚Ä¢ runManualMigration() - Forzar migraci√≥n manual');
